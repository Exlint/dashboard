import type { ILibraryData } from '../interfaces/libraries-data';

export const eslintData: ILibraryData = {
	name: 'ESLint',
	author: 'Nicholas C. Zakas',
	description: 'Find and fix problems in your JavaScript code.',
	types: ['Linters'],
	categories: ['Code'],
	language: 'JavaScript',
	rules: {
		'Array Callback Return': {
			description: 'Enforce `return` statements in callbacks of array methods',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'array-callback-return',
		},
		'Constructor Super': {
			description: 'Require `super()` calls in constructors',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'constructor-super',
		},
		'For Direction': {
			description: 'Enforce "for" loop update clause moving the counter in the right direction',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'for-direction',
		},
		'Getter Return': {
			description: 'Enforce `return` statements in getters',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'getter-return',
		},
		'No Async Promise Executor': {
			description: 'Disallow using an async function as a Promise executor',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-async-promise-executor',
		},
		'No Await In Loop': {
			description: 'Disallow `await` inside of loops',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-await-in-loop',
		},
		'No Class Assign': {
			description: 'Disallow reassigning class members',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-class-assign',
		},
		'No Compare Neg Zero': {
			description: 'Disallow comparing against -0',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-compare-neg-zero',
		},
		'No Cond Assign': {
			description: 'Disallow assignment operators in conditional expressions',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-cond-assign',
		},
		'No Const Assign': {
			description: 'Disallow reassigning `const` variables',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-const-assign',
		},
		'No Constant Binary Expression': {
			description: "Disallow expressions where the operation doesn't affect the value",
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-constant-binary-expression',
		},
		'No Constant Condition': {
			description: 'Disallow constant expressions in conditions',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-constant-condition',
		},
		'No Constructor Return': {
			description: 'Disallow returning value from constructor',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-constructor-return',
		},
		'No Control Regex': {
			description: 'Disallow control characters in regular expressions',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-control-regex',
		},
		'No Debugger': {
			description: 'Disallow the use of `debugger`',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-debugger',
		},
		'No Dupe Args': {
			description: 'Disallow duplicate arguments in `function` definitions',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-dupe-args',
		},
		'No Dupe Class Members': {
			description: 'Disallow duplicate class members',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-dupe-class-members',
		},
		'No Dupe Else If': {
			description: 'Disallow duplicate conditions in if-else-if chains',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-dupe-else-if',
		},
		'No Dupe Keys': {
			description: 'Disallow duplicate keys in object literals',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-dupe-keys',
		},
		'No Duplicate Case': {
			description: 'Disallow duplicate case labels',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-duplicate-case',
		},
		'No Duplicate Imports': {
			description: 'Disallow duplicate module imports',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-duplicate-imports',
		},
		'No Empty Character Class': {
			description: 'Disallow empty character classes in regular expressions',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-empty-character-class',
		},
		'No Empty Pattern': {
			description: 'Disallow empty destructuring patterns',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-empty-pattern',
		},
		'No Ex Assign': {
			description: 'Disallow reassigning exceptions in `catch` clauses',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-ex-assign',
		},
		'No Fallthrough': {
			description: 'Disallow fallthrough of `case` statements',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-fallthrough',
		},
		'No Func Assign': {
			description: 'Disallow reassigning `function` declarations',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-func-assign',
		},
		'No Import Assign': {
			description: 'Disallow assigning to imported bindings',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-import-assign',
		},
		'No Inner Declarations': {
			description: 'Disallow variable or `function` declarations in nested blocks',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-inner-declarations',
		},
		'No Invalid Regexp': {
			description: 'Disallow invalid regular expression strings in `RegExp` constructors',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-invalid-regexp',
		},
		'No Irregular Whitespace': {
			description: 'Disallow irregular whitespace',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-irregular-whitespace',
		},
		'No Loss Of Precision': {
			description: 'Disallow literal numbers that lose precision',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-loss-of-precision',
		},
		'No Misleading Character Class': {
			description:
				'Disallow characters which are made with multiple code points in character class syntax',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-misleading-character-class',
		},
		'No New Symbol': {
			description: 'Disallow `new` operators with the `Symbol` object',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-new-symbol',
		},
		'No Obj Calls': {
			description: 'Disallow calling global object properties as functions',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-obj-calls',
		},
		'No Promise Executor Return': {
			description: 'Disallow returning values from Promise executor functions',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-promise-executor-return',
		},
		'No Prototype Builtins': {
			description: 'Disallow calling some `Object.prototype` methods directly on objects',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-prototype-builtins',
		},
		'No Self Assign': {
			description: 'Disallow assignments where both sides are exactly the same',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-self-assign',
		},
		'No Self Compare': {
			description: 'Disallow comparisons where both sides are exactly the same',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-self-compare',
		},
		'No Setter Return': {
			description: 'Disallow returning values from setters',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-setter-return',
		},
		'No Sparse Arrays': {
			description: 'Disallow sparse arrays',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-sparse-arrays',
		},
		'No Template Curly In String': {
			description: 'Disallow template literal placeholder syntax in regular strings',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-template-curly-in-string',
		},
		'No This Before Super': {
			description: 'Disallow `this`/`super` before calling `super()` in constructors',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-this-before-super',
		},
		'No Undef': {
			description:
				'Disallow the use of undeclared variables unless mentioned in `/*global */` comments',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-undef',
		},
		'No Unexpected Multiline': {
			description: 'Disallow confusing multiline expressions',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-unexpected-multiline',
		},
		'No Unmodified Loop Condition': {
			description: 'Disallow unmodified loop conditions',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-unmodified-loop-condition',
		},
		'No Unreachable': {
			description:
				'Disallow unreachable code after `return`, `throw`, `continue`, and `break` statements',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-unreachable',
		},
		'No Unreachable Loop': {
			description: 'Disallow loops with a body that allows only one iteration',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-unreachable-loop',
		},
		'No Unsafe Finally': {
			description: 'Disallow control flow statements in `finally` blocks',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-unsafe-finally',
		},
		'No Unsafe Negation': {
			description: 'Disallow negating the left operand of relational operators',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-unsafe-negation',
		},
		'No Unsafe Optional Chaining': {
			description:
				'Disallow use of optional chaining in contexts where the `undefined` value is not allowed',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-unsafe-optional-chaining',
		},
		'No Unused Private Class Members': {
			description: 'Disallow unused private class members',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-unused-private-class-members',
		},
		'No Unused Vars': {
			description: 'Disallow unused variables',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-unused-vars',
		},
		'No Use Before Define': {
			description: 'Disallow the use of variables before they are defined',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-use-before-define',
		},
		'No Useless Backreference': {
			description: 'Disallow useless backreferences in regular expressions',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'no-useless-backreference',
		},
		'Require Atomic Updates': {
			description:
				'Disallow assignments that can lead to race conditions due to usage of `await` or `yield`',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'require-atomic-updates',
		},
		'Use Isnan': {
			description: 'Require calls to `isNaN()` when checking for `NaN`',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'use-isnan',
		},
		'Valid Typeof': {
			description: 'Enforce comparing `typeof` expressions against valid strings',
			hasAutoFix: false,
			category: 'Possible Problems',
			configApi: 'valid-typeof',
		},
		'Accessor Pairs': {
			description: 'Enforce getter and setter pairs in objects and classes',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'accessor-pairs',
		},
		'Arrow Body Style': {
			description: 'Require braces around arrow function bodies',
			hasAutoFix: true,
			category: 'Suggestions',
			configApi: 'arrow-body-style',
		},
		'Block Scoped Var': {
			description: 'Enforce the use of variables within the scope they are defined',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'block-scoped-var',
		},
		'Camelcase': {
			description: 'Enforce camelcase naming convention',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'camelcase',
		},
		'Capitalized Comments': {
			description: 'Enforce or disallow capitalization of the first letter of a comment',
			hasAutoFix: true,
			category: 'Suggestions',
			configApi: 'capitalized-comments',
		},
		'Class Methods Use This': {
			description: 'Enforce that class methods utilize `this`',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'class-methods-use-this',
		},
		'Complexity': {
			description: 'Enforce a maximum cyclomatic complexity allowed in a program',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'complexity',
		},
		'Consistent Return': {
			description: 'Require `return` statements to either always or never specify values',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'consistent-return',
		},
		'Consistent This': {
			description: 'Enforce consistent naming when capturing the current execution context',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'consistent-this',
		},
		'Curly': {
			description: 'Enforce consistent brace style for all control statements',
			hasAutoFix: true,
			category: 'Suggestions',
			configApi: 'curly',
		},
		'Default Case': {
			description: 'Require `default` cases in `switch` statements',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'default-case',
		},
		'Default Case Last': {
			description: 'Enforce default clauses in switch statements to be last',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'default-case-last',
		},
		'Default Param Last': {
			description: 'Enforce default parameters to be last',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'default-param-last',
		},
		'Dot Notation': {
			description: 'Enforce dot notation whenever possible',
			hasAutoFix: true,
			category: 'Suggestions',
			configApi: 'dot-notation',
		},
		'Eqeqeq': {
			description: 'Require the use of `===` and `!==`',
			hasAutoFix: true,
			category: 'Suggestions',
			configApi: 'eqeqeq',
		},
		'Func Name Matching': {
			description:
				'Require function names to match the name of the variable or property to which they are assigned',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'func-name-matching',
		},
		'Func Names': {
			description: 'Require or disallow named `function` expressions',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'func-names',
		},
		'Func Style': {
			description: 'Enforce the consistent use of either `function` declarations or expressions',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'func-style',
		},
		'Grouped Accessor Pairs': {
			description: 'Require grouped accessor pairs in object literals and classes',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'grouped-accessor-pairs',
		},
		'Guard For In': {
			description: 'Require `for-in` loops to include an `if` statement',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'guard-for-in',
		},
		'Id Denylist': {
			description: 'Disallow specified identifiers',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'id-denylist',
		},
		'Id Length': {
			description: 'Enforce minimum and maximum identifier lengths',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'id-length',
		},
		'Id Match': {
			description: 'Require identifiers to match a specified regular expression',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'id-match',
		},
		'Init Declarations': {
			description: 'Require or disallow initialization in variable declarations',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'init-declarations',
		},
		'Max Classes Per File': {
			description: 'Enforce a maximum number of classes per file',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'max-classes-per-file',
		},
		'Max Depth': {
			description: 'Enforce a maximum depth that blocks can be nested',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'max-depth',
		},
		'Max Lines': {
			description: 'Enforce a maximum number of lines per file',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'max-lines',
		},
		'Max Lines Per Function': {
			description: 'Enforce a maximum number of lines of code in a function',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'max-lines-per-function',
		},
		'Max Nested Callbacks': {
			description: 'Enforce a maximum depth that callbacks can be nested',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'max-nested-callbacks',
		},
		'Max Params': {
			description: 'Enforce a maximum number of parameters in function definitions',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'max-params',
		},
		'Max Statements': {
			description: 'Enforce a maximum number of statements allowed in function blocks',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'max-statements',
		},
		'Multiline Comment Style': {
			description: 'Enforce a particular style for multiline comments',
			hasAutoFix: true,
			category: 'Suggestions',
			configApi: 'multiline-comment-style',
		},
		'New Cap': {
			description: 'Require constructor names to begin with a capital letter',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'new-cap',
		},
		'No Alert': {
			description: 'Disallow the use of `alert`, `confirm`, and `prompt`',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-alert',
		},
		'No Array Constructor': {
			description: 'Disallow `Array` constructors',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-array-constructor',
		},
		'No Bitwise': {
			description: 'Disallow bitwise operators',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-bitwise',
		},
		'No Caller': {
			description: 'Disallow the use of `arguments.caller` or `arguments.callee`',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-caller',
		},
		'No Case Declarations': {
			description: 'Disallow lexical declarations in case clauses',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-case-declarations',
		},
		'No Confusing Arrow': {
			description: 'Disallow arrow functions where they could be confused with comparisons',
			hasAutoFix: true,
			category: 'Suggestions',
			configApi: 'no-confusing-arrow',
		},
		'No Console': {
			description: 'Disallow the use of `console`',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-console',
		},
		'No Continue': {
			description: 'Disallow `continue` statements',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-continue',
		},
		'No Delete Var': {
			description: 'Disallow deleting variables',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-delete-var',
		},
		'No Div Regex': {
			description: 'Disallow division operators explicitly at the beginning of regular expressions',
			hasAutoFix: true,
			category: 'Suggestions',
			configApi: 'no-div-regex',
		},
		'No Else Return': {
			description: 'Disallow `else` blocks after `return` statements in `if` statements',
			hasAutoFix: true,
			category: 'Suggestions',
			configApi: 'no-else-return',
		},
		'No Empty': {
			description: 'Disallow empty block statements',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-empty',
		},
		'No Empty Function': {
			description: 'Disallow empty functions',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-empty-function',
		},
		'No Eq Null': {
			description: 'Disallow `null` comparisons without type-checking operators',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-eq-null',
		},
		'No Eval': {
			description: 'Disallow the use of `eval()`',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-eval',
		},
		'No Extend Native': {
			description: 'Disallow extending native types',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-extend-native',
		},
		'No Extra Bind': {
			description: 'Disallow unnecessary calls to `.bind()`',
			hasAutoFix: true,
			category: 'Suggestions',
			configApi: 'no-extra-bind',
		},
		'No Extra Boolean Cast': {
			description: 'Disallow unnecessary boolean casts',
			hasAutoFix: true,
			category: 'Suggestions',
			configApi: 'no-extra-boolean-cast',
		},
		'No Extra Label': {
			description: 'Disallow unnecessary labels',
			hasAutoFix: true,
			category: 'Suggestions',
			configApi: 'no-extra-label',
		},
		'No Extra Semi': {
			description: 'Disallow unnecessary semicolons',
			hasAutoFix: true,
			category: 'Suggestions',
			configApi: 'no-extra-semi',
		},
		'No Floating Decimal': {
			description: 'Disallow leading or trailing decimal points in numeric literals',
			hasAutoFix: true,
			category: 'Suggestions',
			configApi: 'no-floating-decimal',
		},
		'No Global Assign': {
			description: 'Disallow assignments to native objects or read-only global variables',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-global-assign',
		},
		'No Implicit Coercion': {
			description: 'Disallow shorthand type conversions',
			hasAutoFix: true,
			category: 'Suggestions',
			configApi: 'no-implicit-coercion',
		},
		'No Implicit Globals': {
			description: 'Disallow declarations in the global scope',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-implicit-globals',
		},
		'No Implied Eval': {
			description: 'Disallow the use of `eval()`-like methods',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-implied-eval',
		},
		'No Inline Comments': {
			description: 'Disallow inline comments after code',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-inline-comments',
		},
		'No Invalid This': {
			description: 'Disallow use of `this` in contexts where the value of `this` is `undefined`',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-invalid-this',
		},
		'No Iterator': {
			description: 'Disallow the use of the `__iterator__` property',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-iterator',
		},
		'No Label Var': {
			description: 'Disallow labels that share a name with a variable',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-label-var',
		},
		'No Labels': {
			description: 'Disallow labeled statements',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-labels',
		},
		'No Lone Blocks': {
			description: 'Disallow unnecessary nested blocks',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-lone-blocks',
		},
		'No Lonely If': {
			description: 'Disallow `if` statements as the only statement in `else` blocks',
			hasAutoFix: true,
			category: 'Suggestions',
			configApi: 'no-lonely-if',
		},
		'No Loop Func': {
			description:
				'Disallow function declarations that contain unsafe references inside loop statements',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-loop-func',
		},
		'No Magic Numbers': {
			description: 'Disallow magic numbers',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-magic-numbers',
		},
		'No Mixed Operators': {
			description: 'Disallow mixed binary operators',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-mixed-operators',
		},
		'No Multi Assign': {
			description: 'Disallow use of chained assignment expressions',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-multi-assign',
		},
		'No Multi Str': {
			description: 'Disallow multiline strings',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-multi-str',
		},
		'No Negated Condition': {
			description: 'Disallow negated conditions',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-negated-condition',
		},
		'No Nested Ternary': {
			description: 'Disallow nested ternary expressions',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-nested-ternary',
		},
		'No New': {
			description: 'Disallow `new` operators outside of assignments or comparisons',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-new',
		},
		'No New Func': {
			description: 'Disallow `new` operators with the `Function` object',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-new-func',
		},
		'No New Object': {
			description: 'Disallow `Object` constructors',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-new-object',
		},
		'No New Wrappers': {
			description: 'Disallow `new` operators with the `String`, `Number`, and `Boolean` objects',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-new-wrappers',
		},
		'No Nonoctal Decimal Escape': {
			description: 'Disallow `\\8` and `\\9` escape sequences in string literals',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-nonoctal-decimal-escape',
		},
		'No Octal': {
			description: 'Disallow octal literals',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-octal',
		},
		'No Octal Escape': {
			description: 'Disallow octal escape sequences in string literals',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-octal-escape',
		},
		'No Param Reassign': {
			description: 'Disallow reassigning `function` parameters',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-param-reassign',
		},
		'No Plusplus': {
			description: 'Disallow the unary operators `++` and `--`',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-plusplus',
		},
		'No Proto': {
			description: 'Disallow the use of the `__proto__` property',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-proto',
		},
		'No Redeclare': {
			description: 'Disallow variable redeclaration',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-redeclare',
		},
		'No Regex Spaces': {
			description: 'Disallow multiple spaces in regular expressions',
			hasAutoFix: true,
			category: 'Suggestions',
			configApi: 'no-regex-spaces',
		},
		'No Restricted Exports': {
			description: 'Disallow specified names in exports',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-restricted-exports',
		},
		'No Restricted Globals': {
			description: 'Disallow specified global variables',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-restricted-globals',
		},
		'No Restricted Imports': {
			description: 'Disallow specified modules when loaded by `import`',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-restricted-imports',
		},
		'No Restricted Properties': {
			description: 'Disallow certain properties on certain objects',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-restricted-properties',
		},
		'No Restricted Syntax': {
			description: 'Disallow specified syntax',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-restricted-syntax',
		},
		'No Return Assign': {
			description: 'Disallow assignment operators in `return` statements',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-return-assign',
		},
		'No Return Await': {
			description: 'Disallow unnecessary `return await`',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-return-await',
		},
		'No Script Url': {
			description: 'Disallow `javascript:` urls',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-script-url',
		},
		'No Sequences': {
			description: 'Disallow comma operators',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-sequences',
		},
		'No Shadow': {
			description:
				'Disallow variable declarations from shadowing variables declared in the outer scope',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-shadow',
		},
		'No Shadow Restricted Names': {
			description: 'Disallow identifiers from shadowing restricted names',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-shadow-restricted-names',
		},
		'No Ternary': {
			description: 'Disallow ternary operators',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-ternary',
		},
		'No Throw Literal': {
			description: 'Disallow throwing literals as exceptions',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-throw-literal',
		},
		'No Undef Init': {
			description: 'Disallow initializing variables to `undefined`',
			hasAutoFix: true,
			category: 'Suggestions',
			configApi: 'no-undef-init',
		},
		'No Undefined': {
			description: 'Disallow the use of `undefined` as an identifier',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-undefined',
		},
		'No Underscore Dangle': {
			description: 'Disallow dangling underscores in identifiers',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-underscore-dangle',
		},
		'No Unneeded Ternary': {
			description: 'Disallow ternary operators when simpler alternatives exist',
			hasAutoFix: true,
			category: 'Suggestions',
			configApi: 'no-unneeded-ternary',
		},
		'No Unused Expressions': {
			description: 'Disallow unused expressions',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-unused-expressions',
		},
		'No Unused Labels': {
			description: 'Disallow unused labels',
			hasAutoFix: true,
			category: 'Suggestions',
			configApi: 'no-unused-labels',
		},
		'No Useless Call': {
			description: 'Disallow unnecessary calls to `.call()` and `.apply()`',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-useless-call',
		},
		'No Useless Catch': {
			description: 'Disallow unnecessary `catch` clauses',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-useless-catch',
		},
		'No Useless Computed Key': {
			description: 'Disallow unnecessary computed property keys in objects and classes',
			hasAutoFix: true,
			category: 'Suggestions',
			configApi: 'no-useless-computed-key',
		},
		'No Useless Concat': {
			description: 'Disallow unnecessary concatenation of literals or template literals',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-useless-concat',
		},
		'No Useless Constructor': {
			description: 'Disallow unnecessary constructors',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-useless-constructor',
		},
		'No Useless Escape': {
			description: 'Disallow unnecessary escape characters',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-useless-escape',
		},
		'No Useless Rename': {
			description: 'Disallow renaming import, export, and destructured assignments to the same name',
			hasAutoFix: true,
			category: 'Suggestions',
			configApi: 'no-useless-rename',
		},
		'No Useless Return': {
			description: 'Disallow redundant return statements',
			hasAutoFix: true,
			category: 'Suggestions',
			configApi: 'no-useless-return',
		},
		'No Var': {
			description: 'Require `let` or `const` instead of `var`',
			hasAutoFix: true,
			category: 'Suggestions',
			configApi: 'no-var',
		},
		'No Void': {
			description: 'Disallow `void` operators',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-void',
		},
		'No Warning Comments': {
			description: 'Disallow specified warning terms in comments',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-warning-comments',
		},
		'No With': {
			description: 'Disallow `with` statements',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'no-with',
		},
		'Object Shorthand': {
			description: 'Require or disallow method and property shorthand syntax for object literals',
			hasAutoFix: true,
			category: 'Suggestions',
			configApi: 'object-shorthand',
		},
		'One Var': {
			description: 'Enforce variables to be declared either together or separately in functions',
			hasAutoFix: true,
			category: 'Suggestions',
			configApi: 'one-var',
		},
		'One Var Declaration Per Line': {
			description: 'Require or disallow newlines around variable declarations',
			hasAutoFix: true,
			category: 'Suggestions',
			configApi: 'one-var-declaration-per-line',
		},
		'Operator Assignment': {
			description: 'Require or disallow assignment operator shorthand where possible',
			hasAutoFix: true,
			category: 'Suggestions',
			configApi: 'operator-assignment',
		},
		'Prefer Arrow Callback': {
			description: 'Require using arrow functions for callbacks',
			hasAutoFix: true,
			category: 'Suggestions',
			configApi: 'prefer-arrow-callback',
		},
		'Prefer Const': {
			description:
				'Require `const` declarations for variables that are never reassigned after declared',
			hasAutoFix: true,
			category: 'Suggestions',
			configApi: 'prefer-const',
		},
		'Prefer Destructuring': {
			description: 'Require destructuring from arrays and/or objects',
			hasAutoFix: true,
			category: 'Suggestions',
			configApi: 'prefer-destructuring',
		},
		'Prefer Exponentiation Operator': {
			description: 'Disallow the use of `Math.pow` in favor of the `**` operator',
			hasAutoFix: true,
			category: 'Suggestions',
			configApi: 'prefer-exponentiation-operator',
		},
		'Prefer Named Capture Group': {
			description: 'Enforce using named capture group in regular expression',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'prefer-named-capture-group',
		},
		'Prefer Numeric Literals': {
			description:
				'Disallow `parseInt()` and `Number.parseInt()` in favor of binary, octal, and hexadecimal literals',
			hasAutoFix: true,
			category: 'Suggestions',
			configApi: 'prefer-numeric-literals',
		},
		'Prefer Object Has Own': {
			description:
				'Disallow use of `Object.prototype.hasOwnProperty.call()` and prefer use of `Object.hasOwn()`',
			hasAutoFix: true,
			category: 'Suggestions',
			configApi: 'prefer-object-has-own',
		},
		'Prefer Object Spread': {
			description:
				'Disallow using Object.assign with an object literal as the first argument and prefer the use of object spread instead.',
			hasAutoFix: true,
			category: 'Suggestions',
			configApi: 'prefer-object-spread',
		},
		'Prefer Promise Reject Errors': {
			description: 'Require using Error objects as Promise rejection reasons',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'prefer-promise-reject-errors',
		},
		'Prefer Regex Literals': {
			description: 'Disallow use of the `RegExp` constructor in favor of regular expression literals',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'prefer-regex-literals',
		},
		'Prefer Rest Params': {
			description: 'Require rest parameters instead of `arguments`',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'prefer-rest-params',
		},
		'Prefer Spread': {
			description: 'Require spread operators instead of `.apply()`',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'prefer-spread',
		},
		'Prefer Template': {
			description: 'Require template literals instead of string concatenation',
			hasAutoFix: true,
			category: 'Suggestions',
			configApi: 'prefer-template',
		},
		'Quote Props': {
			description: 'Require quotes around object literal property names',
			hasAutoFix: true,
			category: 'Suggestions',
			configApi: 'quote-props',
		},
		'Radix': {
			description: 'Enforce the consistent use of the radix argument when using `parseInt()`',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'radix',
		},
		'Require Await': {
			description: 'Disallow async functions which have no `await` expression',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'require-await',
		},
		'Require Unicode Regexp': {
			description: 'Enforce the use of `u` flag on RegExp',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'require-unicode-regexp',
		},
		'Require Yield': {
			description: 'Require generator functions to contain `yield`',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'require-yield',
		},
		'Sort Imports': {
			description: 'Enforce sorted import declarations within modules',
			hasAutoFix: true,
			category: 'Suggestions',
			configApi: 'sort-imports',
		},
		'Sort Keys': {
			description: 'Require object keys to be sorted',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'sort-keys',
		},
		'Sort Vars': {
			description: 'Require variables within the same declaration block to be sorted',
			hasAutoFix: true,
			category: 'Suggestions',
			configApi: 'sort-vars',
		},
		'Spaced Comment': {
			description: 'Enforce consistent spacing after the `//` or `/*` in a comment',
			hasAutoFix: true,
			category: 'Suggestions',
			configApi: 'spaced-comment',
		},
		'Strict': {
			description: 'Require or disallow strict mode directives',
			hasAutoFix: true,
			category: 'Suggestions',
			configApi: 'strict',
		},
		'Symbol Description': {
			description: 'Require symbol descriptions',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'symbol-description',
		},
		'Vars On Top': {
			description: 'Require `var` declarations be placed at the top of their containing scope',
			hasAutoFix: false,
			category: 'Suggestions',
			configApi: 'vars-on-top',
		},
		'Yoda': {
			description: 'Require or disallow "Yoda" conditions',
			hasAutoFix: true,
			category: 'Suggestions',
			configApi: 'yoda',
		},
		'Array Bracket Newline': {
			description: 'Enforce linebreaks after opening and before closing array brackets',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'array-bracket-newline',
		},
		'Array Bracket Spacing': {
			description: 'Enforce consistent spacing inside array brackets',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'array-bracket-spacing',
		},
		'Array Element Newline': {
			description: 'Enforce line breaks after each array element',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'array-element-newline',
		},
		'Arrow Parens': {
			description: 'Require parentheses around arrow function arguments',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'arrow-parens',
		},
		'Arrow Spacing': {
			description: 'Enforce consistent spacing before and after the arrow in arrow functions',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'arrow-spacing',
		},
		'Block Spacing': {
			description:
				'Disallow or enforce spaces inside of blocks after opening block and before closing block',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'block-spacing',
		},
		'Brace Style': {
			description: 'Enforce consistent brace style for blocks',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'brace-style',
		},
		'Comma Dangle': {
			description: 'Require or disallow trailing commas',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'comma-dangle',
		},
		'Comma Spacing': {
			description: 'Enforce consistent spacing before and after commas',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'comma-spacing',
		},
		'Comma Style': {
			description: 'Enforce consistent comma style',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'comma-style',
		},
		'Computed Property Spacing': {
			description: 'Enforce consistent spacing inside computed property brackets',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'computed-property-spacing',
		},
		'Dot Location': {
			description: 'Enforce consistent newlines before and after dots',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'dot-location',
		},
		'Eol Last': {
			description: 'Require or disallow newline at the end of files',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'eol-last',
		},
		'Func Call Spacing': {
			description: 'Require or disallow spacing between function identifiers and their invocations',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'func-call-spacing',
		},
		'Function Call Argument Newline': {
			description: 'Enforce line breaks between arguments of a function call',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'function-call-argument-newline',
		},
		'Function Paren Newline': {
			description: 'Enforce consistent line breaks inside function parentheses',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'function-paren-newline',
		},
		'Generator Star Spacing': {
			description: 'Enforce consistent spacing around `*` operators in generator functions',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'generator-star-spacing',
		},
		'Implicit Arrow Linebreak': {
			description: 'Enforce the location of arrow function bodies',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'implicit-arrow-linebreak',
		},
		'Indent': {
			description: 'Enforce consistent indentation',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'indent',
		},
		'Jsx Quotes': {
			description: 'Enforce the consistent use of either double or single quotes in JSX attributes',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'jsx-quotes',
		},
		'Key Spacing': {
			description: 'Enforce consistent spacing between keys and values in object literal properties',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'key-spacing',
		},
		'Keyword Spacing': {
			description: 'Enforce consistent spacing before and after keywords',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'keyword-spacing',
		},
		'Line Comment Position': {
			description: 'Enforce position of line comments',
			hasAutoFix: false,
			category: 'Layout And Formatting',
			configApi: 'line-comment-position',
		},
		'Linebreak Style': {
			description: 'Enforce consistent linebreak style',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'linebreak-style',
		},
		'Lines Around Comment': {
			description: 'Require empty lines around comments',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'lines-around-comment',
		},
		'Lines Between Class Members': {
			description: 'Require or disallow an empty line between class members',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'lines-between-class-members',
		},
		'Max Len': {
			description: 'Enforce a maximum line length',
			hasAutoFix: false,
			category: 'Layout And Formatting',
			configApi: 'max-len',
		},
		'Max Statements Per Line': {
			description: 'Enforce a maximum number of statements allowed per line',
			hasAutoFix: false,
			category: 'Layout And Formatting',
			configApi: 'max-statements-per-line',
		},
		'Multiline Ternary': {
			description: 'Enforce newlines between operands of ternary expressions',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'multiline-ternary',
		},
		'New Parens': {
			description: 'Enforce or disallow parentheses when invoking a constructor with no arguments',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'new-parens',
		},
		'Newline Per Chained Call': {
			description: 'Require a newline after each call in a method chain',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'newline-per-chained-call',
		},
		'No Extra Parens': {
			description: 'Disallow unnecessary parentheses',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'no-extra-parens',
		},
		'No Mixed Spaces And Tabs': {
			description: 'Disallow mixed spaces and tabs for indentation',
			hasAutoFix: false,
			category: 'Layout And Formatting',
			configApi: 'no-mixed-spaces-and-tabs',
		},
		'No Multi Spaces': {
			description: 'Disallow multiple spaces',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'no-multi-spaces',
		},
		'No Multiple Empty Lines': {
			description: 'Disallow multiple empty lines',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'no-multiple-empty-lines',
		},
		'No Tabs': {
			description: 'Disallow all tabs',
			hasAutoFix: false,
			category: 'Layout And Formatting',
			configApi: 'no-tabs',
		},
		'No Trailing Spaces': {
			description: 'Disallow trailing whitespace at the end of lines',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'no-trailing-spaces',
		},
		'No Whitespace Before Property': {
			description: 'Disallow whitespace before properties',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'no-whitespace-before-property',
		},
		'Nonblock Statement Body Position': {
			description: 'Enforce the location of single-line statements',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'nonblock-statement-body-position',
		},
		'Object Curly Newline': {
			description: 'Enforce consistent line breaks after opening and before closing braces',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'object-curly-newline',
		},
		'Object Curly Spacing': {
			description: 'Enforce consistent spacing inside braces',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'object-curly-spacing',
		},
		'Object Property Newline': {
			description: 'Enforce placing object properties on separate lines',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'object-property-newline',
		},
		'Operator Linebreak': {
			description: 'Enforce consistent linebreak style for operators',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'operator-linebreak',
		},
		'Padded Blocks': {
			description: 'Require or disallow padding within blocks',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'padded-blocks',
		},
		'Padding Line Between Statements': {
			description: 'Require or disallow padding lines between statements',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'padding-line-between-statements',
		},
		'Quotes': {
			description: 'Enforce the consistent use of either backticks, double, or single quotes',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'quotes',
		},
		'Rest Spread Spacing': {
			description: 'Enforce spacing between rest and spread operators and their expressions',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'rest-spread-spacing',
		},
		'Semi': {
			description: 'Require or disallow semicolons instead of ASI',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'semi',
		},
		'Semi Spacing': {
			description: 'Enforce consistent spacing before and after semicolons',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'semi-spacing',
		},
		'Semi Style': {
			description: 'Enforce location of semicolons',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'semi-style',
		},
		'Space Before Blocks': {
			description: 'Enforce consistent spacing before blocks',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'space-before-blocks',
		},
		'Space Before Function Paren': {
			description: 'Enforce consistent spacing before `function` definition opening parenthesis',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'space-before-function-paren',
		},
		'Space In Parens': {
			description: 'Enforce consistent spacing inside parentheses',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'space-in-parens',
		},
		'Space Infix Ops': {
			description: 'Require spacing around infix operators',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'space-infix-ops',
		},
		'Space Unary Ops': {
			description: 'Enforce consistent spacing before or after unary operators',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'space-unary-ops',
		},
		'Switch Colon Spacing': {
			description: 'Enforce spacing around colons of switch statements',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'switch-colon-spacing',
		},
		'Template Curly Spacing': {
			description: 'Require or disallow spacing around embedded expressions of template strings',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'template-curly-spacing',
		},
		'Template Tag Spacing': {
			description: 'Require or disallow spacing between template tags and their literals',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'template-tag-spacing',
		},
		'Unicode Bom': {
			description: 'Require or disallow Unicode byte order mark (BOM)',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'unicode-bom',
		},
		'Wrap Iife': {
			description: 'Require parentheses around immediate `function` invocations',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'wrap-iife',
		},
		'Wrap Regex': {
			description: 'Require parenthesis around regex literals',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'wrap-regex',
		},
		'Yield Star Spacing': {
			description: 'Require or disallow spacing around the `*` in `yield*` expressions',
			hasAutoFix: true,
			category: 'Layout And Formatting',
			configApi: 'yield-star-spacing',
		},
	},
};
