import type { ILibraryData } from '@exlint-dashboard/common';

export const eslintData: ILibraryData = {
	name: 'ESLint',
	author: 'Nicholas C. Zakas',
	description: 'Find and fix problems in your JavaScript code.',
	types: ['Linters'],
	categories: ['Code'],
	language: 'JavaScript',
	configuration: {
		type: 'object',
		properties: {
			root: {
				title: 'Root',
				description:
					'By default, ESLint will look for configuration files in all parent folders up to the root directory. This can be useful if you want all of your projects to follow a certain convention, but can sometimes lead to unexpected results. To limit ESLint to a specific project, place "root": true.',
				type: 'boolean',
				default: true,
			},
			extends: {
				title: 'Extends',
				description: 'The path to other config files or the package name of shareable configs',
				type: 'array',
				items: { type: 'string' },
			},
			env: {
				title: 'Env',
				description: 'An environment provides predefined global variables',
				type: 'object',
				properties: {
					'browser': { type: 'boolean' },
					'node': { type: 'boolean' },
					'commonjs': { type: 'boolean' },
					'shared-node-browser': { type: 'boolean' },
					'es6': { type: 'boolean' },
					'es2016': { type: 'boolean' },
					'es2017': { type: 'boolean' },
					'es2018': { type: 'boolean' },
					'es2019': { type: 'boolean' },
					'es2020': { type: 'boolean' },
					'es2021': { type: 'boolean' },
					'es2022': { type: 'boolean' },
					'worker': { type: 'boolean' },
					'amd': { type: 'boolean' },
					'mocha': { type: 'boolean' },
					'jasmine': { type: 'boolean' },
					'jest': { type: 'boolean' },
					'phantomjs': { type: 'boolean' },
					'protractor': { type: 'boolean' },
					'qunit': { type: 'boolean' },
					'jquery': { type: 'boolean' },
					'prototypejs': { type: 'boolean' },
					'shelljs': { type: 'boolean' },
					'meteor': { type: 'boolean' },
					'mongo': { type: 'boolean' },
					'applescript': { type: 'boolean' },
					'nashorn': { type: 'boolean' },
					'serviceworker': { type: 'boolean' },
					'atomtest': { type: 'boolean' },
					'embertest': { type: 'boolean' },
					'webextensions': { type: 'boolean' },
					'greasemonkey': { type: 'boolean' },
				},
			},
			parserOptions: {
				title: 'Parser Options',
				description:
					'ESLint allows you to specify the JavaScript language options you want to support.',
				type: 'object',
				properties: {
					ecmaVersion: {
						title: 'ECMA Version',
						description: 'The version of ECMAScript to support.',
						type: 'string',
						enum: [
							3,
							5,
							6,
							7,
							8,
							9,
							10,
							11,
							12,
							13,
							14,
							2015,
							2016,
							2017,
							2018,
							2019,
							2020,
							2021,
							2022,
							2023,
							'latest',
						],
					},
					sourceType: {
						title: 'Source Type',
						description: 'The source code type.',
						type: 'string',
						enum: ['script', 'module'],
					},
					allowReserved: {
						title: 'Allow Reserved',
						description: 'Allowing the use of reserved words as identifiers in ES3.',
						type: 'boolean',
					},
					ecmaFeatures: {
						title: 'ECMA Features',
						description:
							'An object indicating which additional language features youâ€™d like to use',
						type: 'object',
						properties: {
							globalReturn: { type: 'boolean' },
							jsx: { type: 'boolean' },
							impliedStrict: { type: 'boolean' },
						},
					},
				},
			},
			globals: {
				title: 'Globals',
				description:
					'An object specifying additional objects that should be added to the global scope during linting.',
				type: 'object',
				additionalProperties: {
					type: 'string',
					enum: [true, false, 'off', 'readable', 'writable', 'writeable'],
				},
			},
			ignorePatterns: {
				title: 'Ignore Patterns',
				description: 'You can tell ESLint to ignore specific files and directories.',
				type: 'array',
				items: { type: 'string' },
			},
			noInlineConfig: {
				title: 'No Inline Config',
				description: 'If inline configuration is allowed.',
				type: 'boolean',
			},
			reportUnusedDisableDirectives: {
				title: 'Report Unused Disable Directives',
				description: 'If unused disable directives should be tracked and reported.',
				type: 'boolean',
			},
		},
	},
};
