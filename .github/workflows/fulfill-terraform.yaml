name: Fulfill Terrafrom

on:
  workflow_dispatch:

jobs:
    fulfill_terraform:
        name: Fulfill Terraform 
        runs-on: [self-hosted, Linux, X64, deploy]
        if: github.actor == 'tal-rofe'
        env:
            TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
            TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY }}
            TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            TF_VAR_frontend_s3_bucket_name: ${{ secrets.AWS_S3_BUCKET }}
            BACKEND_ECR_REPOSITORY: dashboard-backend
            CLI_BACKEND_ECR_REPOSITORY: dashboard-cli-backend
            DATABASE_URL: mongodb+srv://${{ secrets.DATABASE_USERNAME }}:${{ secrets.DATABASE_PASSWORD }}@exlint-dashboard.gzy04y8.mongodb.net/?retryWrites=true&w=majority

        steps:
            - name: Setup Node environment
              uses: Exlint/node-environment@v1.1.0
              with:
                  should-cache: false
                  node-version: 18.13.0
                  package-manager: pnpm
                  package-manager-version: 7.23.0

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ secrets.AWS_REGION }}

            - name: Terraform setup
              uses: hashicorp/setup-terraform@v2

            - name: Terraform init
              env:
                  TERRAFORM_BACKEND_S3_BUCKET: ${{ secrets.TERRAFORM_BACKEND_S3_BUCKET }}
                  TERRAFORM_BACKEND_DYNAMODB_TABLE: ${{ secrets.TERRAFORM_BACKEND_DYNAMODB_TABLE }}
              run: |
                terraform -chdir="./terraform" init \
                -backend-config="bucket=$TERRAFORM_BACKEND_S3_BUCKET" \
                -backend-config="dynamodb_table=$TERRAFORM_BACKEND_DYNAMODB_TABLE" \
                -backend-config="region=$TF_VAR_aws_region" 

            - name: Terraform plan
              run: terraform -chdir="./terraform" plan -no-color -out state.tfplan

            - name: Terraform apply
              run: terraform -chdir="./terraform" apply state.tfplan -auto-approve

            - name: Get Terraform outputs
              id: terraform-outputs
              run: |
                distribution_id=$(terraform -chdir="./terraform" output cloudfront_distribution_domain_name)
                kube_config_b64=$(terraform -chdir="./terraform" output cluster_kubeconfig | base64)
                domain_certificate_arn=$(terraform -chdir="./terraform" output domain_certificate_arn)
                echo "DISTRIBUTION_ID=$distribution_id" >> $GITHUB_OUTPUT
                echo "KUBE_CONFIG_B64=$kube_config_b64" >> $GITHUB_OUTPUT
                echo "SSL_CERTIFICATE_ARN=$domain_certificate_arn" >> $GITHUB_OUTPUT

            - name: Set Cloudfront distribution ID secret
              uses: hmanzur/actions-set-secret@v2.0.0
              with:
                name: AWS_CLOUDFRONT_DISTRIBUTION_ID
                value: ${{ steps.terraform-outputs.outputs.DISTRIBUTION_ID }}
                repository: Exlint/dashboard
                token: ${{ secrets.SET_SECRETS_GH_TOKEN }}

            - name: Set k8s kube config secret
              uses: hmanzur/actions-set-secret@v2.0.0
              with:
                name: KUBE_CONFIG_DATA
                value: ${{ steps.terraform-outputs.outputs.KUBE_CONFIG_B64 }}
                repository: Exlint/dashboard
                token: ${{ secrets.SET_SECRETS_GH_TOKEN }}

            - name: Set domain certificate ARN secret
              uses: hmanzur/actions-set-secret@v2.0.0
              with:
                name: SSL_CERTIFICATE_ARN
                value: ${{ steps.terraform-outputs.outputs.SSL_CERTIFICATE_ARN }}
                repository: Exlint/dashboard
                token: ${{ secrets.SET_SECRETS_GH_TOKEN }}

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1

            - name: Get package.json version
              id: package-version
              uses: martinbeentjes/npm-get-version-action@master

            - name: Create backend deployment based on template
              uses: danielr1996/envsubst-action@1.1.0
              env:
                  BACKEND_IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ env.BACKEND_ECR_REPOSITORY }}:${{ steps.package-version.outputs.current-version }}
                  NODE_ENV: production
                  PORT: 3000
                  ACCESS_TOKEN_JWT_KEY: ${{ secrets.ACCESS_TOKEN_JWT_KEY }}
                  REFRESH_TOKEN_JWT_KEY: ${{ secrets.REFRESH_TOKEN_JWT_KEY }}
                  GOOGLE_OAUTH_CLIENT_ID: ${{ secrets.GOOGLE_OAUTH_CLIENT_ID }}
                  GOOGLE_OAUTH_CLIENT_SECRET: ${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }}
                  GOOGLE_OAUTH_REDIRECT_URI: "https://www.api.exlint.io:3000/user/auth/google-redirect"
                  GH_OAUTH_CLIENT_ID: ${{ secrets.GH_OAUTH_CLIENT_ID }}
                  GH_OAUTH_CLIENT_SECRET: ${{ secrets.GH_OAUTH_CLIENT_SECRET }}
                  GITHUB_OAUTH_REDIRECT_URI: "https://www.api.exlint.io:3000/user/auth/github-redirect"
                  MIXPANEL_TOKEN: ${{ secrets.MIXPANEL_TOKEN }}
                  FRONTEND_URL: "https://www.app.exlint.io"
                  CLI_TOKEN_JWT_KEY: ${{ secrets.CLI_TOKEN_JWT_KEY }}
                  DATABASE_URL: ${{ env.DATABASE_URL }}
              with:
                  input: ./k8s/backend-deployment.template.yaml
                  output: ./k8s/backend-deployment.yaml

            - name: Create backend service based on template
              uses: danielr1996/envsubst-action@1.1.0
              env:
                  PORT: 3000
              with:
                input: ./k8s/backend-service.template.yaml
                output: ./k8s/backend-service.yaml

            - name: Create cli-backend deployment based on template
              uses: danielr1996/envsubst-action@1.1.0
              env:
                  CLI_BACKEND_IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ env.CLI_BACKEND_ECR_REPOSITORY }}:${{ steps.package-version.outputs.current-version }}
                  NODE_ENV: production
                  PORT: 3000
                  REFRESH_TOKEN_JWT_KEY: ${{ secrets.REFRESH_TOKEN_JWT_KEY }}
                  MIXPANEL_TOKEN: ${{ secrets.MIXPANEL_TOKEN }}
                  FRONTEND_URL: "https://www.app.exlint.io"
                  CLI_TOKEN_JWT_KEY: ${{ secrets.CLI_TOKEN_JWT_KEY }}
                  DATABASE_URL: ${{ env.DATABASE_URL }}
              with:
                input: ./k8s/cli-backend-deployment.template.yaml
                output: ./k8s/cli-backend-deployment.yaml

            - name: Create cli-backend service based on template
              uses: danielr1996/envsubst-action@1.1.0
              env:
                  PORT: 3000
              with:
                input: ./k8s/cli-backend-service.template.yaml
                output: ./k8s/cli-backend-service.yaml

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2.2.1

            - name: Docker cache layers
              uses: actions/cache@v3
              with:
                path: /tmp/.buildx-cache
                key: ${{ runner.os }}-single-buildx-${{ github.sha }}
                restore-keys: |
                  ${{ runner.os }}-single-buildx

            - name: Build & Push Backend Image
              env:
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                IMAGE_TAG: ${{ steps.package-version.outputs.current-version }}
              run: |
                docker buildx create --use

                docker buildx build \
                  --cache-from=type=local,src=/tmp/.buildx-cache \
                  --cache-to=type=local,dest=/tmp/.buildx-cache-new \
                  --tag $ECR_REGISTRY/$BACKEND_ECR_REPOSITORY:$IMAGE_TAG \
                  --target release \
                  --push \
                  -f ./docker/Dockerfile.backend-prod                                     
                  .

                rm -rf /tmp/.buildx-cache
                mv /tmp/.buildx-cache-new /tmp/.buildx-cache

            - name: Build & Push CLI-Backend Image
              env:
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                IMAGE_TAG: ${{ steps.package-version.outputs.current-version }}
              run: |
                docker buildx create --use

                docker buildx build \
                  --cache-from=type=local,src=/tmp/.buildx-cache \
                  --cache-to=type=local,dest=/tmp/.buildx-cache-new \
                  --tag $ECR_REGISTRY/$CLI_BACKEND_ECR_REPOSITORY:$IMAGE_TAG \
                  --target release \
                  --push \
                  -f ./docker/Dockerfile.cli-backend-prod                                     
                  .

                rm -rf /tmp/.buildx-cache
                mv /tmp/.buildx-cache-new /tmp/.buildx-cache

            - name: Deploy k8s APIs to EKS
              uses: kodermax/kubectl-aws-eks@master
              env:
                KUBE_CONFIG_DATA: ${{ steps.terraform-outputs.outputs.KUBE_CONFIG_B64 }}
              with:
                args: apply -f=./k8s/backend-deployment.yaml -f=./k8s/backend-service.yaml -f=./k8s/cli-backend-deployment.yaml -f=./k8s/cli-backend-service.yaml

            - name: Build frontend
              run: pnpm exec nx build @exlint-dashboard/frontend

            - name: Deploy to S3 and invalidate Cloudfront
              uses: reggionick/s3-deploy@v3
              with:
                  folder: ./apps/frontend/dist
                  bucket: ${{ secrets.AWS_S3_BUCKET }}
                  bucket-region: ${{ secrets.AWS_REGION }}
                  dist-id: ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }}
                  invalidation: /
                  delete-removed: true
                  private: true
                  filesToInclude: '**/*'

            - name: Slack notification                                
              uses: rtCamp/action-slack-notify@v2             
              env:                                                    
                SLACK_CHANNEL: dashboard-deployment       
                SLACK_MESSAGE: 'Just fulfilled Terraform'
                SLACK_TITLE: 'Deployment'                         
                SLACK_USERNAME: 'Yazif Deployer'                           
                SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL_DASHBOARD_DEPLOYMENT }}       
                MSG_MINIMAL: true  
