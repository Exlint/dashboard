generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum AuthType {
  LOCAL
  GOOGLE
  GITHUB
}

enum PolicyLibrary {
  ESLINT
  PRETTIER
  INFLINT
  STYLELINT
  DEPCHECK
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name         String
  email        String  @unique
  passwordHash String?

  authType      AuthType
  externalToken String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  refreshTokens RefreshToken[]
  clientSecrets ClientSecret[]
  groups        Group[]
  policies      Policy[]
}

model RefreshToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  token  String
  userId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ClientSecret {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  secret String
  userId String @db.ObjectId
  label  String

  expiration DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique(fields: [userId, label], name: "unique_user_labels")
  @@unique(fields: [userId, secret], name: "unique_user_secrets")
}

model InlinePolicy {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  groupId       String        @db.ObjectId
  label         String
  library       PolicyLibrary
  configuration Json?
  rules         Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model Group {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId    String   @db.ObjectId
  label     String?
  policyIDs String[] @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  inlinePolicies InlinePolicy[]

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  policies Policy[] @relation(fields: [policyIDs], references: [id])

  @@unique(fields: [userId, label], name: "unique_user_labels")
}

model Policy {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId        String        @db.ObjectId
  label         String
  library       PolicyLibrary
  configuration Json?
  rules         Json?
  groupsIDs     String[]      @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  groups Group[] @relation(fields: [groupsIDs], references: [id])
}
