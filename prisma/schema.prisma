generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum AuthType {
  GOOGLE
  GITHUB
}

enum PolicyLibrary {
  ESLint
  Prettier
  Inflint
  Stylelint
  Depcheck
}

enum CodeType {
  JSON
  YAML
  JS
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name  String
  email String @unique

  authType      AuthType
  externalToken String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  refreshTokens RefreshToken[]
  secrets       Secret[]
  groups        Group[]
}

model RefreshToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  token  String
  userId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Secret {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  secret String
  userId String @db.ObjectId
  label  String

  expiration DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique(fields: [userId, label], name: "unique_user_labels")
  @@unique(fields: [userId, secret], name: "unique_user_secrets")
}

model InlinePolicy {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  groupId             String        @db.ObjectId
  label               String
  description         String?
  library             PolicyLibrary
  formConfiguration   Json?
  codeConfiguration   String?
  isFormConfiguration Boolean       @default(true)
  codeType            CodeType?
  lintedList          String[]      @default([])
  ignoredList         String[]      @default([])
  rules               Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model Group {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId      String  @db.ObjectId
  label       String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  inlinePolicies InlinePolicy[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique(fields: [userId, label], name: "unique_user_labels")
}
